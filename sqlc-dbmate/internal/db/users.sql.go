// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO dbmate (name, email) VALUES ($1, $2)
`

type CreateUserParams struct {
	Name  sql.NullString
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, age, is_active FROM dbmate WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Dbmate, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i Dbmate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.IsActive,
	)
	return i, err
}
